name: Build iOS app

on:
  push:
    branches:
      - ios_ci3
      - bixin_dev
  pull_request:
    branches:
      - bixin_dev
env:
  SHORT_SHA: $(git rev-parse --short ${{ github.sha }})
  COMMIT_MSG: $(git log --oneline -n 1 --format=%s ${{ github.sha }})

jobs:
  build:
    runs-on: macos-latest
    env:
      APP_ID: so.onekey.one.OneKey
      APP_NAME: OneKey
      EMAIL: hello@onekey.so
      PROJECT_WORKSPACE: OneKey.xcworkspace
      PROJECT_SCHEME: OneKey
      PROJECT_CONFIGURATION: Debug
      CODE_SIGN_IDENTITY: "iPhone Developer"
      UUID_PROVISION: 9ec95d41-5005-4176-aed0-ace1746b9b6c
      CODE_SIGN_STYLE: Manual
      DEVELOPMENT_TEAM: 6M2QF4T7XG
      PUBLISH_IPA: false

    steps:
      - name: checkout branch
        uses: actions/checkout@v2
        if: github.event_name != 'pull_request'
        with:
            submodules: 'true'
      - name: checkout pull request
        uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
            ref: ${{ github.event.pull_request.head.sha }}
            submodules: 'true'
      - name: Switch XCode Version
        run: sudo xcode-select -s /Applications/Xcode_12.1.app
      - name: Cache build env
        uses: actions/cache@v2
        env:
          cache-name: cache-ios-build
        with:
          # python cache files are stored in `~/.local` on Linux/macOS
          path: |
            - $HOME/.local
            - $HOME/Library/Caches/Homebrew
            - /Users/runner/Library/Caches/pip/
            - /Users/runner/.cookiecutters/Python-iOS-template
            - /Users/runner/work/electrum/electrum/ios/iOS/Pods
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Install brew deps
        run: |
          brew install python@3.8
          brew unlink python
          brew link --force python@3.8
      - name: Install python3 deps
        run: |
          python3.8 -m pip install "setuptools==41.2.0"
          python3.8 -m pip install "pip==19.2.3"
          python3.8 -m pip install 'cookiecutter==1.6.0' --user
          python3.8 -m pip install 'briefcase==0.2.6' --user
          python3.8 -m pip install 'pbxproj==2.5.1' --user
      - name: Setup cert
        run: ./.github/secrets/decrypt_certs.sh
        env:
          IOS_CERTIFICATE_PASS: ${{ secrets.IOS_CERTIFICATE_PASS }}
          ENCRYPT_PASS: ${{ secrets.ENCRYPT_PASS }}
      - name: prepare build env
        run: |
          ./make_ios_project.sh
        working-directory: ios
      - name: sign lib
        run: |
          ./coderesign.sh "${{ secrets.CODESIGN_ID }}"
        working-directory: ios
      - name: Build app
        id: xcodebuild_export
        run: |
          mkdir build
          mkdir logs
          xcodebuild archive \
           -workspace "$PROJECT_WORKSPACE" \
           -scheme "$PROJECT_SCHEME" \
           -configuration "$PROJECT_CONFIGURATION" \
           -archivePath $PWD/build/app_build.xcarchive \
           CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
           PROVISIONING_PROFILE="$UUID_PROVISION" \
           DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
           CODE_SIGN_STYLE="$CODE_SIGN_STYLE" \
           IPHONEOS_DEPLOYMENT_TARGET=11.0
        working-directory: ios/iOS
      - name: Create ExportOptions
        run: |
          plutil -insert  'provisioningProfiles' -xml "<dict> <key>$APP_ID</key> <string>$UUID_PROVISION</string> </dict>" -- OneKey/OneKey-Info.plist
          plutil -insert  'teamID' -string "$DEVELOPMENT_TEAM" -- OneKey/OneKey-Info.plist
          plutil -insert  'signingStyle' -string "mannual" -- OneKey/OneKey-Info.plist
        working-directory: ios/iOS
      - name: Export IPA
        id: xcodebuild_archive
        run: |
          xcodebuild -exportArchive \
          -exportPath $PWD/build \
          -archivePath $PWD/build/app_build.xcarchive \
          -exportOptionsPlist ${APP_NAME}/${APP_NAME}-Info.plist
        working-directory: ios/iOS
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: OneKey-${{ github.sha }}.ipa
          path: |
            ios/iOS/build/${{ env.APP_NAME }}.ipa
            ios/iOS/build/app_build.xcarchive
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        if: success()
        with:
          tag_name: travis-build-ios
          release_name: ${{ env.APP_NAME }} iOS development build (bixin_dev) ${{ github.sha }}
          body: |
            Changes in this Release
            ${{ env.COMMIT_MSG }}
          draft: false
          prerelease: false
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ssh_host }}
          username: ${{ secrets.ssh_user }}
          password: ${{ secrets.ssh_pass }}
          port: 22
          source: "ios/iOS/build/${{ env.APP_NAME }}.ipa"
          target: "output"
      - name: Upload PGYER File
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            curl -F "file=output/ios/iOS/build/${{ env.APP_NAME }}.ipa" \
            -F "uKey=${{ secrets.pgyer_user_key }}"  \
            -F "_api_key=${{ secrets.pgyer_key }}" \
            https://www.pgyer.com/apiv2/app/upload

#     - name: Upload Release Asset
#       id: upload-release-asset 
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#         asset_path: ./my-artifact.zip
#         asset_path: ./ios/iOS/build/OneKey.ipa
#         asset_name: OneKey.ipa
#     - name: Upload fir File
#       id: frm
#       run: |
#           gem install fir-cli
#           fir login -T 1949666e99d34ebb025c3a3eb4db26eb
#           fir publish build/$APP_NAME.ipa
#       working-directory: ios/iOS 
#     - name: Upload PGYER File
#       id: pgyer
#       run: |
#         curl -F "file=@build/$APP_NAME.ipa" \
#         -F "uKey=${{ secrets.pgyer_user_key }}"  \
#         -F "_api_key=${{ secrets.pgyer_key }}" \
#         https://www.pgyer.com/apiv2/app/upload
#       working-directory: ios/iOS
